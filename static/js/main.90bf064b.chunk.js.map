{"version":3,"sources":["component/Movie.js","component/Loading.js","App.js","reportWebVitals.js","index.js"],"names":["Movie","poster_path","title","overview","vote_average","id","className","src","alt","Loading","App","useState","moives","setMovies","loading","setLoading","searchTerm","setSearchTerm","useEffect","getMovies","API","fetch","then","res","json","data","console","log","results","onSubmit","e","preventDefault","type","placeholder","value","onChange","target","length","map","movie","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8MA0BeA,EAtBD,SAAC,GAAwD,IAAtDC,EAAqD,EAArDA,YAAaC,EAAwC,EAAxCA,MAAOC,EAAiC,EAAjCA,SAAcC,GAAmB,EAAvBC,GAAuB,EAAnBD,cACjD,OACE,sBAAKE,UAAU,QAAf,UACE,qBACEC,IACEN,EAPM,mCAQQA,EACV,gKAENO,IAAKN,IAEP,sBAAKI,UAAU,aAAf,UACE,6BAAKJ,IACL,sBAAMI,UAAU,MAAhB,SAAuBF,OAEzB,sBAAKE,UAAU,aAAf,UACE,2CACA,4BAAIH,WCfGM,G,MAJC,WACZ,OAAS,8CCoEEC,MA5Df,WACE,MAA4BC,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAA8BF,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAAoCJ,mBAAS,IAA7C,mBAAOK,EAAP,KAAmBC,EAAnB,KAEAC,qBAAU,WACRC,EAVF,yHAWG,IAEH,IAAMA,EAAY,SAACC,GACjBC,MAAMD,GACHE,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLC,QAAQC,IAAIF,GACZZ,EAAUY,EAAKG,SACfb,GAAW,OAgBjB,OAAID,EAEA,+BACE,cAAC,EAAD,MAMJ,qCACE,iCACE,sBAAMe,SAvBW,SAACC,GACtBA,EAAEC,iBACEf,IACFG,EAxBJ,6FAwB2BH,GACvBC,EAAc,MAmBZ,SACE,uBACEX,UAAU,SACV0B,KAAK,SACLC,YAAY,YACZC,MAAOlB,EACPmB,SArBa,SAACL,GACtBb,EAAca,EAAEM,OAAOF,cAwBrB,sBAAM5B,UAAU,kBAAhB,SACGM,EAAOyB,QACNzB,EAAO0B,KAAI,SAACC,GAAD,OAAW,cAAC,EAAD,eAA0BA,GAAdA,EAAMlC,aCrDnCmC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBpB,MAAK,YAAkD,IAA/CqB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.90bf064b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Img_api = \"https://image.tmdb.org/t/p/w1280\";\r\n\r\nconst Movie = ({ poster_path, title, overview, id, vote_average }) => {\r\n  return (\r\n    <div className=\"movie\">\r\n      <img\r\n        src={\r\n          poster_path\r\n            ? Img_api + poster_path\r\n            : \"https://images.unsplash.com/photo-1485846234645-a62644f84728?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=740&q=80\"\r\n        }\r\n        alt={title}\r\n      />\r\n      <div className=\"movie-info\">\r\n        <h3>{title}</h3>\r\n        <span className=\"tag\">{vote_average}</span>\r\n      </div>\r\n      <div className=\"movie-over\">\r\n        <h2>overview:</h2>\r\n        <p>{overview}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Movie;\r\n","import React from 'react';\r\n\r\nconst Loading = () => {\r\n    return ( <h1>Loading...</h1> );\r\n}\r\n \r\nexport default Loading;","import React, { useEffect, useState } from \"react\";\nimport Movie from \"./component/Movie\";\nimport axios from \"axios\";\nimport Loading from \"./component/Loading\";\n\nconst url = \"https://60a004427ee1430017bf1440.mockapi.io/movies\";\nconst Featured_api =\n  \"https://api.themoviedb.org/3/discover/movie?sort_by=popularity.desc&api_key=04c35731a5ee918f014970082a0088b1&page=1\";\nconst Sewrch_api =\n  \"https://api.themoviedb.org/3/search/movie?&api_key=04c35731a5ee918f014970082a0088b1&query=\";\n\nfunction App() {\n  const [moives, setMovies] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  useEffect(() => {\n    getMovies(Featured_api);\n  }, []);\n\n  const getMovies = (API) => {\n    fetch(API)\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(data);\n        setMovies(data.results);\n        setLoading(false);\n      });\n  };\n\n  const haldleOnsubmit = (e) => {\n    e.preventDefault();\n    if (searchTerm) {\n      getMovies(Sewrch_api + searchTerm);\n      setSearchTerm(\"\");\n    }\n  };\n\n  const handleonChange = (e) => {\n    setSearchTerm(e.target.value);\n  };\n\n  if (loading) {\n    return (\n      <main>\n        <Loading />\n      </main>\n    );\n  }\n\n  return (\n    <>\n      <header>\n        <form onSubmit={haldleOnsubmit}>\n          <input\n            className=\"search\"\n            type=\"search\"\n            placeholder=\"search...\"\n            value={searchTerm}\n            onChange={handleonChange}\n          />\n        </form>\n      </header>\n      <main className=\"movie-container\">\n        {moives.length &&\n          moives.map((movie) => <Movie key={movie.id} {...movie} />)}\n      </main>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}